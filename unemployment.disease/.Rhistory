cat("/n")
cat(paste("min: (x, y) = ", min[[1]], ", ", min[[2]]))
}
opt(equation, c(-10,10))
opt <- function(eq, interval) {
max <- optimise(eq, interval = interval, maximum = T)
min <- optimise(eq, interval = interval, maximum = F)
cat(paste("max: (x, y) = ", max[[1]], ", ", max[[2]]))
cat(/n)
cat(paste("min: (x, y) = ", min[[1]], ", ", min[[2]]))
}
opt <- function(eq, interval) {
max <- optimise(eq, interval = interval, maximum = T)
min <- optimise(eq, interval = interval, maximum = F)
cat(paste("max: (x, y) = ", max[[1]], ", ", max[[2]]))
cat(" ", sep = "\n")
cat(paste("min: (x, y) = ", min[[1]], ", ", min[[2]]))
}
opt <- function(eq, interval) {
max <- optimise(eq, interval = interval, maximum = T)
min <- optimise(eq, interval = interval, maximum = F)
cat(paste("max: (x, y) = ", max[[1]], ", ", max[[2]]))
cat(/n)
cat(paste("min: (x, y) = ", min[[1]], ", ", min[[2]]))
}
opt(equation, c(-10,10))
library(tidyverse)
library(nycflights13)
plane
nycflights13::planes
View(nycflights13::planes)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readr)
library(stringr)
library(ggplot2)
library(plotly)
options(scipen=999)  # disable scientific notation
source('./analysis_code/mers_tour.R')
source('./analysis_code/mers_tour.R')
source('./analysis_code/mers_tour.R')
source('./analysis_code/mers_tour.R')
source('./analysis_code/mers_tour.R')
source('./analysis_code/mers_tour.R')
source('./analysis_code/mers_tour.R')
?scale_x_date
?format
source('./analysis_code/mers_tour.R')
source('./analysis_code/mers_tour.R')
Sys.setlocale("LC_TIME", "C")  # set locale to display date in en
source('./analysis_code/mers_tour.R')
install.packages("dygraphs")
library(dygraphs)
library(dygraphs)
lungDeaths <- cbind(mdeaths, fdeaths)
dygraph(lungDeaths)
dygraph(lungDeaths) %>%
dySeries("mdeaths", label = "Male") %>%
dySeries("fdeaths", label = "Female") %>%
dyOptions(stackedGraph = TRUE) %>%
dyRangeSelector(height = 20)
?dyRangeSelector
?ts
temperature <- ts(frequency = 12, start = c(1980, 1),
data = c(7.0, 6.9, 9.5, 14.5, 18.2, 21.5,
25.2, 26.5, 23.3, 18.3, 13.9, 9.6))
rainfall <- ts(frequency = 12, start = c(1980, 1),
data = c(49.9, 71.5, 106.4, 129.2, 144.0, 176.0,
135.6, 148.5, 216.4, 194.1, 95.6, 54.4))
weather <- cbind(rainfall, temperature)
dygraph(weather)
dygraph(weather) %>%
dySeries("rainfall", axis = 'y2')
devtools::install_github('rstudio/DT')
library(DT)
options(DT.options = list(pageLength = 5))
df = as.data.frame(cbind(matrix(round(rnorm(50), 3), 10), sample(0:1, 10, TRUE)))
# style V6 based on values of V6
datatable(df) %>% formatStyle(
'V6',
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
)
datatable(df) %>% formatStyle(
'V6',
target = 'row',
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
)
datatable(df) %>% formatStyle(
'V6',
target = 'row',
backgroundColor = styleEqual(1, 'yellow'))
)
?formatStyle
?styleEqual
## Highlight row in Table
datatable(df, rownames = FALSE) %>% formatStyle('V6', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
?datatable
?pageLength
??pageLength
sketch = htmltools::withTags(table(
tableHeader(df),
tableFooter(df)
))
print(sketch)
## Highlight row in Table
datatable(df, rownames = FALSE, style='bootstrap',container = sketch, options = list(pageLength = 5, dom = 'tip')) %>%
formatStyle('V6', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
sketch = htmltools::withTags(table(
tableHeader(df),
tableFooter(df)
))
print(sketch)
## Highlight row in Table
datatable(df, rownames = FALSE, style='bootstrap',container = sketch, options = list(pageLength = 5) %>%
formatStyle('V6', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
sketch = htmltools::withTags(table(
tableHeader(df),
tableFooter(df)
))
print(sketch)
## Highlight row in Table
datatable(df, rownames = FALSE, style='bootstrap',container = sketch, options = list(pageLength = 5) %>%
formatStyle('V6', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
sketch = htmltools::withTags(table(
tableHeader(df),
tableFooter(df)
))
print(sketch)
## Highlight row in Table
datatable(df, rownames = FALSE, style='bootstrap',container = sketch, options = list(pageLength = 5) %>%
formatStyle('V6', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
sketch = htmltools::withTags(table(
tableHeader(df),
tableFooter(df)
))
print(sketch)
## Highlight row in Table
datatable(df, rownames = FALSE, style='bootstrap',container = sketch, options = list(pageLength = 5) %>%
formatStyle('V6', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
sketch = htmltools::withTags(table(
tableHeader(df),
tableFooter(df)
))
print(sketch)
## Highlight row in Table
datatable(df, rownames = FALSE, style='bootstrap',container = sketch, options = list(pageLength = 5) %>%
formatStyle('V6', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
sketch = htmltools::withTags(table(
tableHeader(df),
tableFooter(df)
))
print(sketch)
## Highlight row in Table
datatable(df, rownames = FALSE, style='bootstrap',container = sketch, options = list(pageLength = 5) %>%
formatStyle('V6', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
sketch = htmltools::withTags(table(
tableHeader(df),
tableFooter(df)
))
print(sketch)
## Highlight row in Table
datatable(df, rownames = FALSE, style='bootstrap',container = sketch, options = list(pageLength = 5) %>%
formatStyle('V6', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
sketch = htmltools::withTags(table(
tableHeader(df),
tableFooter(df)
))
print(sketch)
## Highlight row in Table
datatable(df, rownames = FALSE, style='bootstrap',container = sketch, options = list(pageLength = 5)) %>%
formatStyle('V6', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
sketch = htmltools::withTags(table(
tableHeader(df),
tableFooter(df)
))
print(sketch)
## Highlight row in Table
datatable(df, rownames = FALSE, style='bootstrap',container = sketch, options =pageLength = 5) %>%
formatStyle('V6', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
sketch = htmltools::withTags(table(
tableHeader(df),
tableFooter(df)
))
print(sketch)
## Highlight row in Table
datatable(df, rownames = FALSE, style='bootstrap',container = sketch, options =pageLength = 5) %>%
formatStyle('V6', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
tableHeader(df),
tableFooter(df)
))
print(sketch)
## Highlight row in Table
datatable(df, rownames = FALSE, style='bootstrap', options =pageLength = 5) %>%
formatStyle('V6', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
## Highlight row in Table
datatable(df, rownames = FALSE, options =pageLength = 5) %>%
formatStyle('V6', ## select target column to compare    container = sketch , style='bootstrap'
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
## Highlight row in Table
datatable(df, rownames = FALSE, options =pageLength = 5) %>%
formatStyle('V6', ## select target column to compare    container = sketch , style='bootstrap'
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
datatable(df, rownames = FALSE, options =pageLength = 5) %>%
formatStyle('V6', ## select target column to compare    container = sketch , style='bootstrap'
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
## Highlight row in Table
datatable(df, rownames = FALSE) %>%
formatStyle('V6', ## select target column to compare    container = sketch , style='bootstrap'
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
datatable(df, rownames = FALSE, options =pageLength = 3) %>%
formatStyle('V6', ## select target column to compare    container = sketch , style='bootstrap'
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
sketch = htmltools::withTags(table(
tableHeader(df),
tableFooter(df)
))
print(sketch)
## Highlight row in Table
datatable(df, rownames = FALSE, options =pageLength = 3) %>%
formatStyle('V6', ## select target column to compare    container = sketch , style='bootstrap'
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
rm(list=ls())
## Highlight row in Table
datatable(df, rownames = FALSE, options =pageLength = 3) %>%
formatStyle('V6', ## select target column to compare    container = sketch , style='bootstrap'
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
datatable(df, rownames = FALSE, options =pageLength = 10) %>%
formatStyle('V6', ## select target column to compare    container = sketch , style='bootstrap'
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
## Highlight row in Table
datatable(df, rownames = FALSE, style='bootstrap') %>%
formatStyle('V6', ## select target column to compare    container = sketch
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
datatable(df, rownames = FALSE) %>%
formatStyle('V6', ## select target column to compare    container = sketch
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
datatable(df, rownames = FALSE, style='bootstrap',container = sketch) %>%
formatStyle('V6', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
sketch = htmltools::withTags(table(
tableHeader(df),
tableFooter(df)
))
print(sketch)
## Highlight row in Table
datatable(df, rownames = FALSE, style='bootstrap',container = sketch) %>%
formatStyle('V6', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
rm(list = ls())
library(DT)
sketch = htmltools::withTags(table(
tableHeader(df),
tableFooter(df)
))
print(sketch)
## Highlight row in Table
datatable(df, rownames = FALSE, style='bootstrap',container = sketch) %>%
formatStyle('V6', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
View(sketch)
## Highlight row in Table
datatable(df, rownames = FALSE, style='bootstrap',container = sketch) %>%
formatStyle('V6', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(0, 1), c('gray', 'yellow'))
## gray: for rows with 0 at V6
## yellow: for rows with 1 at V6
)
df
head(iris)
sketch = htmltools::withTags(table(
tableHeader(iris),
tableFooter(iris)
))
print(sketch)
## Highlight row in Table
datatable(iris, rownames = FALSE, style='bootstrap',container = sketch) %>%
formatStyle('Petal.Length', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(1.4, 1.7), c('gray', 'yellow'))
## gray: for rows with 1.4 at Petal.Length
## yellow: for rows with 1.7 at Petal.Length
)
datatable(iris, rownames = FALSE, style='bootstrap',
options = list(
searchable = FALSE,
pageLength = 5)
) %>%
formatStyle('Petal.Length', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(1.4, 1.7), c('gray', 'yellow'))
## gray: for rows with 1.4 at Petal.Length
## yellow: for rows with 1.7 at Petal.Length
)
rm(list=ls())
datatable(iris, rownames = FALSE, style='bootstrap',
options = list(
searchable = FALSE,
pageLength = 5)
) %>%
formatStyle('Petal.Length', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(1.4, 1.7), c('gray', 'yellow'))
## gray: for rows with 1.4 at Petal.Length
## yellow: for rows with 1.7 at Petal.Length
)
datatable(iris, rownames = FALSE, style='bootstrap',
options = list(
searchable = FALSE,
pageLength = 8)
) %>%
formatStyle('Petal.Length', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(1.4, 1.7), c('gray', 'yellow'))
## gray: for rows with 1.4 at Petal.Length
## yellow: for rows with 1.7 at Petal.Length
)
## Highlight row in Table
datatable(iris, rownames = FALSE, style='bootstrap',
options = list(pageLength = 8)
) %>%
formatStyle('Petal.Length', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(1.4, 1.7), c('gray', 'yellow'))
## gray: for rows with 1.4 at Petal.Length
## yellow: for rows with 1.7 at Petal.Length
)
## Highlight row in Table
datatable(iris, rownames = FALSE, style='bootstrap',
options = list(pageLength = 8)
) %>%
formatStyle('Petal.Length', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(1.4, 1.7), c('gray', 'yellow'))
## gray: for rows with 1.4 at Petal.Length
## yellow: for rows with 1.7 at Petal.Length
)
datatable(mpcars, rownames = FALSE, style='bootstrap',
options = list(pageLength = 8)
) %>%
formatStyle('Petal.Length', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(1.4, 1.7), c('gray', 'yellow'))
## gray: for rows with 1.4 at Petal.Length
## yellow: for rows with 1.7 at Petal.Length
)
datatable(mtcars, rownames = FALSE, style='bootstrap',
options = list(pageLength = 8)
) %>%
formatStyle('Petal.Length', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(1.4, 1.7), c('gray', 'yellow'))
## gray: for rows with 1.4 at Petal.Length
## yellow: for rows with 1.7 at Petal.Length
)
datatable(mtcars, rownames = FALSE, style='bootstrap',
options = list(pageLength = 8)
) %>%
formatStyle('Petal.Length', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(1.4, 1.7), c('gray', 'yellow'))
## gray: for rows with 1.4 at Petal.Length
## yellow: for rows with 1.7 at Petal.Length
)
datatable(iris, rownames = FALSE, style='bootstrap',
options = list(pageLength = 8)
) %>%
formatStyle('Petal.Length', ## select target column to compare
target = 'row',  ## highlight row
backgroundColor = styleEqual(c(1.4, 1.7), c('gray', 'yellow'))
## gray: for rows with 1.4 at Petal.Length
## yellow: for rows with 1.7 at Petal.Length
)
knitr::opts_chunk$set(echo = TRUE)
opt <- function(eq, interval) {
max <- optimise(eq, interval = interval, maximum = T)
min <- optimise(eq, interval = interval, maximum = F)
curve(eq, from =interval[1], to=interval[2])
cat(paste("max: (x, f(X)) = ", max[[1]], ", ", max[[2]]))
cat(" ", sep = "\n")
cat(paste("min: (x, f(x)) = ", min[[1]], ", ", min[[2]]))
}
你好嗎我好
setwd("C:/Users/user/rlads_communicate/communicate.web.source/unemployment.disease")
library(flexdashboard)
source("./unemployment.disease/tmap.R")
?knitr::opts_chunk$set
knitr::opts_chunk$set
library(knitr)
?opts_chunk$set
?knitr::opts_chunk$set
??knitr::opts_chunk$set
knitr::opts_chunk$set
?opts_chunk
str(knitr::opts_chunk$get())
